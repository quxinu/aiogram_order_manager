import re
from datetime import datetime
import pyshorteners

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import StatesGroup, State

from handlers.keyboards.default_keyboard import default_keyboard
from tools.others import get_adm_user
from db_func import dbmanager


router = Router()


@router.message(F.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
async def cansel_user(message: types.Message, state: FSMContext):
    if message.from_user.id in get_adm_user():
        await state.clear()
        await message.reply("–û—Ç–º–µ–Ω–∞", reply_markup=default_keyboard)


class AddClient(StatesGroup):
    input_first_name = State()
    input_last_name = State()
    input_phone = State()
    input_city = State()
    input_birthday = State()
    input_avito_profile = State()
    input_shoe_model = State()
    input_shoe_size = State()
    input_purchase_amount = State()


@router.message(StateFilter(None), F.text.lower() == "üìù –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
async def add_client(message: types.Message, state: FSMContext):
    if message.from_user.id in get_adm_user():
        await state.clear()
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [
                    types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
                ]
            ],
            resize_keyboard=True,
        )
        await message.reply("üòÆ‚Äçüí® –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=keyboard)
        await state.set_state(AddClient.input_first_name)


@router.message(AddClient.input_first_name, F.text)
async def first_name(message: types.Message, state: FSMContext):
    if (re.search(r'^[a-zA-Z–∞-—è–ê-–Ø\s]+$', message.text) and ' ' not in message.text) or message.text.lower() == "none":
        if message.text.lower() != "none":
            await state.update_data(first_name=message.text)
        else:
            await state.update_data(first_name=None)
        await message.reply("üòÆ‚Äçüí® –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∫–ª–∏–µ–Ω—Ç–∞:")
        await state.set_state(AddClient.input_last_name)
    else:
        await message.reply("üõë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –≤ –∏–º–µ–Ω–∏. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–±–µ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è.")


@router.message(AddClient.input_last_name, F.text)
async def last_name(message: types.Message, state: FSMContext):
    if (re.search(r'^[a-zA-Z–∞-—è–ê-–Ø\s]+$', message.text) and ' ' not in message.text) or message.text.lower() == "none":
        if message.text.lower() != "none":
            await state.update_data(last_name=message.text)
        else:
            await state.update_data(last_name=None)
        await message.reply("üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79997778899:")
        await state.set_state(AddClient.input_phone)
    else:
        await message.reply("üõë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –≤ –∏–º–µ–Ω–∏. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–±–µ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è.")


@router.message(AddClient.input_phone, F.text)
async def input_phone(message: types.Message, state: FSMContext):
    if re.search(r'^\+\d{1,15}$', message.text) or message.text.lower() == "none":
        if message.text.lower() != "none":
            await state.update_data(phone=message.text)
        else:
            await state.update_data(phone=None)
        await message.reply("üåÉ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞:")
        await state.set_state(AddClient.input_city)
    else:
        await message.reply("üõë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79997778899.")


@router.message(AddClient.input_city, F.text)
async def input_city(message: types.Message, state: FSMContext):
    if (re.search(r'^[a-zA-Z–∞-—è–ê-–Ø\s]+$', message.text) and ' ' not in message.text) or message.text.lower() == "none":
        if message.text.lower() != "none":
            await state.update_data(city=message.text)
        else:
            await state.update_data(city=None)
        await message.reply("üéÇ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY.MM.DD:")
        await state.set_state(AddClient.input_birthday)
    else:
        await message.reply("üõë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ì–æ—Ä–æ–¥–∞. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–±–µ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è.")


@router.message(AddClient.input_birthday, F.text)
async def input_birthday(message: types.Message, state: FSMContext):
    try:
        date_obj = datetime.strptime(message.text, '%Y.%m.%d')
        if date_obj < datetime.now():
            await state.update_data(birthday=str(date_obj.strftime('%Y-%m-%d')))
            await message.reply("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–≤–∏—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞: ")
            await state.set_state(AddClient.input_avito_profile)
        else:
            await message.reply("üõë –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
    except:
        if message.text.lower() != "none":
            await message.reply("üõë –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY.MM.DD")
        else:
            await state.update_data(birthday=None)
            await message.reply("üîó –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–≤–∏—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞: ")
            await state.set_state(AddClient.input_avito_profile)


@router.message(AddClient.input_avito_profile, F.text)
async def input_avito_profile(message: types.Message, state: FSMContext):
    status = False
    if message.text.lower() != "none":
        try:
            short_url = pyshorteners.Shortener().tinyurl.short(message.text)
            await state.update_data(avito_profile=short_url)
            status = True
        except:
            await message.reply("üõë –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é —Å—Å—ã–ª–∫—É")
    else:
        await state.update_data(avito_profile=None)
        status = True
        
    if status:
        await message.reply(f"üëü –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–æ–¥–µ–ª—å –æ–±—É–≤–∏ –∫–ª–∏–µ–Ω—Ç–∞:")
        await state.set_state(AddClient.input_shoe_model)


@router.message(AddClient.input_shoe_model, F.text)
async def input_shoe_model(message: types.Message, state: FSMContext):
    if message.text.lower() != "none":
        await state.update_data(shoe_model=message.text)
    else:
        await state.update_data(shoe_model=None)
    await message.reply(f"üìè –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–±—É–≤–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–º:")
    await state.set_state(AddClient.input_shoe_size)


@router.message(AddClient.input_shoe_size, F.text)
async def input_shoe_size(message: types.Message, state: FSMContext):
    if re.search(r'^\d+(\.\d)?$', message.text) or message.text.lower() == "none":
        if message.text.lower() != "none":
            await state.update_data(shoe_size=float(message.text))
        else:
            await state.update_data(shoe_size=None)
        await message.reply("üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:")
        await state.set_state(AddClient.input_purchase_amount)
    else:
        await message.reply("üõë –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä 27.5")


@router.message(AddClient.input_purchase_amount, F.text)
async def input_purchase_amount(message: types.Message, state: FSMContext):
    if re.search(r'^\d+(\.\d+)?$', message.text) or message.text.lower() == "none":
        if message.text.lower() != "none":
            await state.update_data(purchase_amount=float(message.text))
        else:
            await state.update_data(purchase_amount=None)

        user_data = await state.get_data()
        dbmanager.add_client(user_data['first_name'], user_data['last_name'],
            user_data['phone'], user_data['city'], user_data['birthday'], user_data['avito_profile'], user_data['shoe_model'], user_data['shoe_size'], user_data['purchase_amount'])
        
        await state.clear()
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", reply_markup=default_keyboard)
    else:
        await message.reply("üõë –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä 24999.99")