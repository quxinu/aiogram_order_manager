import re
from contextlib import suppress
from datetime import datetime

import pyshorteners
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import StateFilter
from aiogram.exceptions import TelegramBadRequest

from handlers.keyboards.default_keyboard import default_keyboard, cancel_keyboard
from tools.others import get_adm_user
from db_func import dbmanager


router = Router()

client_id = {}

@router.message(F.text.lower() == "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ")
async def cansel_user(message: types.Message, state: FSMContext):
    if message.from_user.id in get_adm_user():
        await state.clear()
        await message.reply("–û—Ç–º–µ–Ω–∞", reply_markup=default_keyboard)


class InputUserId(StatesGroup):
    input_id = State()
    input_first_name = State()
    input_last_name = State()
    input_phone = State()
    input_city = State()
    input_birthday = State()
    input_avito_profile = State()
    input_shoe_model = State()
    input_shoe_size = State()
    input_purchase_amount = State()


act = ["click_first_name", "click_last_name", "click_number", "click_city", "click_birthday", "click_profile", "click_shoe_model", "click_shoe_size", "click_amount"]


from aiogram import types

def get_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text=f"üòÆ‚Äçüí® –ò–º—è", callback_data="click_first_name")
        ],
        [
            types.InlineKeyboardButton(text=f"üòÆ‚Äçüí® –§–∞–º–∏–ª–∏—é", callback_data=act[1])
        ],
        [
            types.InlineKeyboardButton(text=f"üìû –ù–æ–º–µ—Ä", callback_data=act[2])
        ],
        [
            types.InlineKeyboardButton(text=f"üåÉ –ì–æ—Ä–æ–¥", callback_data=act[3])
        ],
        [
            types.InlineKeyboardButton(text=f"üéÇ –î–†", callback_data=act[4])
        ],
        [
            types.InlineKeyboardButton(text=f"üîó –ü—Ä–æ—Ñ–∏–ª—å", callback_data=act[5])
        ],
        [
            types.InlineKeyboardButton(text=f"üëü –ú–æ–¥–µ–ª—å –æ–±—É–≤–∏", callback_data=act[6])
        ],
        [
            types.InlineKeyboardButton(text=f"üìè –†–∞–∑–º–µ—Ä –æ–±—É–≤–∏", callback_data=act[7])
        ],
        [
            types.InlineKeyboardButton(text=f"üí∞ –°—É–º–º—É –ø–æ–∫—É–ø–∫–∏", callback_data=act[8])
        ]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard



@router.message(StateFilter(None), F.text.lower() == "üõ† –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
async def changeUser(message: types.Message, state: FSMContext):
    if message.from_user.id in get_adm_user():
        await state.clear()
        await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ id –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_keyboard)
        await state.set_state(InputUserId.input_id)


@router.message(StateFilter(InputUserId.input_id), F.text)
async def InputId(message: types.message):
    try:
        message_id = int(message.text)
        client_id[message.from_user.id] = message_id
        if dbmanager.find_user(message_id):
            await message.reply(f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É –∫–ª–∏–µ–Ω—Ç–∞ {message_id}?", reply_markup=get_keyboard())
        else:
            await message.reply(f"‚ùå –¢–∞–∫–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    except:
        await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç!")
    

@router.callback_query(F.data.startswith("click_"))
async def callback_num(callback: types.CallbackQuery, state: FSMContext):
    with suppress(TelegramBadRequest):
        action = callback.data
        
        if action == act[0]:
            await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_keyboard)
            await state.set_state(InputUserId.input_first_name)
        elif action == act[1]:
            await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_keyboard)
            await state.set_state(InputUserId.input_last_name)
        elif action == act[2]:
            await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_keyboard)
            await state.set_state(InputUserId.input_phone)
        elif action == act[3]:
            await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_keyboard)
            await state.set_state(InputUserId.input_city)
        elif action == act[4]:
            await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ YYYY.MM.DD:", reply_markup=cancel_keyboard)
            await state.set_state(InputUserId.input_birthday)
        elif action == act[5]:
            await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ê–≤–∏—Ç–æ-–ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_keyboard)
            await state.set_state(InputUserId.input_avito_profile)
        elif action == act[6]:
            await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—É–≤–∏ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_keyboard)
            await state.set_state(InputUserId.input_shoe_model)
        elif action == act[7]:
            await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–º:", reply_markup=cancel_keyboard)
            await state.set_state(InputUserId.input_shoe_size)
        elif action == act[8]:
            await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=cancel_keyboard)
            await state.set_state(InputUserId.input_purchase_amount)



@router.message(InputUserId.input_first_name, F.text)
async def first_name(message: types.Message, state: FSMContext):
    if (re.search(r'^[a-zA-Z–∞-—è–ê-–Ø\s]+$', message.text) and ' ' not in message.text) or message.text.lower() == "none":
        if message.text.lower() != "none":
            dbmanager.update_client_data(client_id[message.from_user.id], "first_name", message.text)
        else:
            dbmanager.update_client_data(client_id[message.from_user.id], "first_name", None)
        await state.clear()
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=default_keyboard)
    else:
        await message.reply("üõë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –≤ –∏–º–µ–Ω–∏. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–±–µ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è.")


@router.message(InputUserId.input_last_name, F.text)
async def last_name(message: types.Message, state: FSMContext):
    if (re.search(r'^[a-zA-Z–∞-—è–ê-–Ø\s]+$', message.text) and ' ' not in message.text) or message.text.lower() == "none":
        if message.text.lower() != "none":
            dbmanager.update_client_data(client_id[message.from_user.id], "last_name", message.text)
        else:
            dbmanager.update_client_data(client_id[message.from_user.id], "last_name", None)
        await state.clear()
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª —Ñ–∞–º–∏–ª–∏—é –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=default_keyboard)
    else:
        await message.reply("üõë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –≤ –∏–º–µ–Ω–∏. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–±–µ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è.")


@router.message(InputUserId.input_phone, F.text)
async def input_phone(message: types.Message, state: FSMContext):
    if re.search(r'^\+\d{1,15}$', message.text) or message.text.lower() == "none":
        if message.text.lower() != "none":
            dbmanager.update_client_data(client_id[message.from_user.id], "phone", message.text)
        else:
            dbmanager.update_client_data(client_id[message.from_user.id], "phone", None)
        await state.clear()
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª –Ω–æ–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=default_keyboard)
    else:
        await message.reply("üõë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79997778899.")


@router.message(InputUserId.input_city, F.text)
async def input_city(message: types.Message, state: FSMContext):
    if (re.search(r'^[a-zA-Z–∞-—è–ê-–Ø\s]+$', message.text) and ' ' not in message.text) or message.text.lower() == "none":
        if message.text.lower() != "none":
            dbmanager.update_client_data(client_id[message.from_user.id], "city", message.text)
        else:
            dbmanager.update_client_data(client_id[message.from_user.id], "city", None)
        await state.clear()
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª –≥–æ—Ä–æ–¥ –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=default_keyboard)
    else:
        await message.reply("üõë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –ì–æ—Ä–æ–¥–∞. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –ø—Ä–æ–±–µ–ª—ã –∏ —Ü–∏—Ñ—Ä—ã –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è.")


@router.message(InputUserId.input_birthday, F.text)
async def input_birthday(message: types.Message, state: FSMContext):
    try:
        date_obj = datetime.strptime(message.text, '%Y.%m.%d')
        if date_obj < datetime.now():
            dbmanager.update_client_data(client_id[message.from_user.id], "birthday", str(date_obj.strftime('%Y-%m-%d')))
            await state.clear()
            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=default_keyboard)
        else:
            await message.reply("üõë –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
    except:
        if message.text.lower() != "none":
            await message.reply("üõë –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY.MM.DD")
        else:
            dbmanager.update_client_data(client_id[message.from_user.id], "birthday", None)
            await state.clear()
            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=default_keyboard)


@router.message(InputUserId.input_avito_profile, F.text)
async def input_avito_profile(message: types.Message, state: FSMContext):
    status = False
    if message.text.lower() != "none":
        try:
            short_url = pyshorteners.Shortener().tinyurl.short(message.text)
            dbmanager.update_client_data(client_id[message.from_user.id], "avito_profile", short_url)
            status = True
        except:
            await message.reply("üõë –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—Å—Ç–æ—è—â—É—é —Å—Å—ã–ª–∫—É")
    else:
        dbmanager.update_client_data(client_id[message.from_user.id], "avito_profile", None)
        status = True
        
    if status:
        await state.clear()
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=default_keyboard)


@router.message(InputUserId.input_shoe_model, F.text)
async def input_shoe_model(message: types.Message, state: FSMContext):
    if message.text.lower() != "none":
        dbmanager.update_client_data(client_id[message.from_user.id], "shoe_model", message.text)
    else:
        dbmanager.update_client_data(client_id[message.from_user.id], "shoe_model", None)
    await state.clear()
    await message.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª –º–æ–¥–µ–ª—å –æ–±—É–≤–∏ –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=default_keyboard)


@router.message(InputUserId.input_shoe_size, F.text)
async def input_shoe_size(message: types.Message, state: FSMContext):
    if re.search(r'^\d+(\.\d)?$', message.text) or message.text.lower() == "none":
        if message.text.lower() != "none":
            dbmanager.update_client_data(client_id[message.from_user.id], "shoe_size", float(message.text))
        else:
            dbmanager.update_client_data(client_id[message.from_user.id], "shoe_size", None)
        await state.clear()
        await message.reply(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª —Ä–∞–∑–º–µ—Ä –æ–±—É–≤–∏ –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=default_keyboard)
    else:
        await message.reply("üõë –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä 27.5")


@router.message(InputUserId.input_purchase_amount, F.text)
async def input_purchase_amount(message: types.Message, state: FSMContext):
    if re.search(r'^\d+(\.\d+)?$', message.text) or message.text.lower() == "none":
        if message.text.lower() != "none":
            dbmanager.update_client_data(client_id[message.from_user.id], "purchase_amount", float(message.text))
        else:
            dbmanager.update_client_data(client_id[message.from_user.id], "purchase_amount", None)
        
        await state.clear()
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=default_keyboard)
    else:
        await message.reply("üõë –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä 24999.99")